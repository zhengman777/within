-----------
PyGMi 2.110 [2013-06-25]
-----------

	New features:
	
		1) Object.event_render has been added to facilitate doing things on render without overriding.
		


-----------
PyGMi 2.100 [2013-06-19]
-----------
				
	New behavior:
		
		2) X and Y components can be set in a Sprite's constructor OR in Object.setSprite.
			This allows for position memory on the side of both Sprites and Objects.
				
		3) Object no longer takes a sprite in its constructor. Use Object.setSprite:
			Object.setSprite(sprite,x=None,y=None)
					
	Tweaks and fixes:
			
		1) Sprite.setAlpha() and Sprite.setAlphaKey() should work properly now.

-----------
PyGMi 2.010 [2013-06-18]
-----------

	New behavior:
	
		1) event_mousePressed and eventmouseReleased now return the position of the mouse in the room,
		rather than on the screen. This only matters if you make use of Room.viewx and Room.viewy.

	New features:
		
		1) Whether a key is currently down is now stored in Pygmi.keys[K_foo] as True or False.

	Tweaks and Fixes:
	
		1) Pygmi.createInstance(object) now returns the passed object. This helps with nested function calls.
		
		2) If None is passed as the width or height of a Sprite, it will be auto-sized to its first loaded image.
		
		3) AssetManager now works properly with directory-based animations. To use:
			assets.images["character"]["walk"] (will animate all images in img/character/walk)

-----------
PyGMi 2.000 [2013-06-12]
-----------

Code-breakers:

	1) Room.addToRoom() has been renamed Room._addToRoom(), as it is now intended for internal use.
		Adopting use of Pygmi.createInstance() (explained below) is strongly encouraged.

New behavior:

	It makes sense from an optimization standpoint that a room and its objects not be instantiated until the
	room is set as active. This way, inactive rooms do not take up memory. To facilitate this, Rooms now have
	an event_create() method which is called when they are set as the active room (via gotoRoom() ). At this time,
	all Objects in the Room also have their event_create() methods called. The idea is to create all of a Room's
	Objects in its event_create() method, and then have the objects set themselves up in their own event_create() methods.
	This has an added advantage in that by the time such methods are called, both the Room and Objects will have access
	to a variety of variables. Room will get access to Pygmi via Room.game, the rendering window via Room.window and the
	Asset Manager via Room.assetManager. Objects will have access to the same variables as well as a reference to their
	room via Object.room. To add an Object to the active room, call game.createInstance(object).

New features:

	1) Object.move(x,y) can be used to move an object relative to its current position.
	
	2) Use ESC to exit when in debug mode.
	
	3) Room.setBackground(surface) will render a surface object (AKA loaded images) as the background.
	
	4) An Asset Manager has been built into Pygmi. It will load images in the path src/img, as well as sounds
		in the path src/snd. The asset manager can be retrieved from an instance of Pygmi using pygmiInstance.getAssetManager().
		It is also passed to the active room and its objects as Room.assetManager and Object.assetManager, respectively.

Bug fixes:

	1) Sprite images are automatically converted to optimize display times.
	
	2) PyGMi is initialized with an empty room so that the window will be responsive before rooms are added.


-----------
PyGMi 1.011
-----------

New features:

	1) Bbox.setFlipped(flipped_x,flipped_y) will flip the Bbox.
		
	2) Object.setFlipped(flipped_x,flipped_y) will flip both the Bbox and the Sprite of an Object.


-----------
PyGMi 1.001
-----------

Bug fixes:

	1) Tools.makeText() will now accept any parameter which can be converted to
		a string using str().
		
	2) The collision QuadTree has been reworked to test each collision only once,
		doubling performance and erasing accidental, redundant calls of Object.event_collision().


-----------
PyGMi 1.000
-----------

Code-breakers:
	
	1) event_keyDown and event_keyUp changed to event_keyPressed and event_keyReleased, respectively.
	
New behaviour:
	
	1) Sprites now flip over the axes drawn through their center.
	
	2) Obj.setVisible() and Obj.setSolid() now apply to objects which have already been added to a room.

New features:

	1) A Sprite's animation can be paused with Sprite.setFrameTime(0).
		Note: A Sprite with 1 image will have FrameTime = 0 by default.
	
	2) Use Sprite.setAlpha(<0-255>) to set the alpha for all images of a sprite.
	
	3) Use Sprite.setAlphaKey(color) to set the colorkey for all images of a sprite.
	
	4) Use Sprite.loadAlphaMasks to add per-pixel alpha to images from a mask.
		Note: This is slow. Avoid it by saving images with built-in per-pixel alpha.
	
	5) Use Object.setDepth(int) to set the rendering depth of an Object
		Note: Objects with a small depth will be drawn over Objects with a large depth.
	
Bug fixes:

	1) Collision detection now works properly with auto-generated bounding boxes.
